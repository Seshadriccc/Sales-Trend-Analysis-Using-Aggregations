-- Drop the table if it exists to ensure a clean setup
DROP TABLE IF EXISTS orders;

-- Create the orders table
CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    order_date DATE NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    product_id INTEGER NOT NULL
);

-- Insert sample data spanning multiple months
INSERT INTO orders (order_id, order_date, amount, product_id) VALUES
(1, '2024-01-15', 150.00, 101),
(2, '2024-01-20', 200.50, 102),
(3, '2024-02-10', 175.25, 103),
(4, '2024-02-15', 300.00, 104),
(5, '2024-03-05', 225.75, 105),
(6, '2024-03-12', 180.00, 106);

-- Sales Trend Analysis: Monthly Revenue and Order Volume
SELECT 
    YEAR(order_date) AS sales_year,
    MONTH(order_date) AS sales_month,
    ROUND(SUM(amount), 2) AS monthly_revenue,
    COUNT(DISTINCT order_id) AS order_volume,
    ROUND(AVG(amount), 2) AS average_order_value
FROM orders
GROUP BY 
    YEAR(order_date), 
    MONTH(order_date)
ORDER BY 
    sales_year DESC, 
    sales_month DESC;

-- Top 3 months by sales revenue
SELECT 
    YEAR(order_date) AS year,
    MONTH(order_date) AS month,
    ROUND(SUM(amount), 2) AS revenue
FROM orders
GROUP BY YEAR(order_date), MONTH(order_date)
ORDER BY revenue DESC
LIMIT 3;

-- Monthly growth rate analysis
WITH monthly_sales AS (
    SELECT 
        YEAR(order_date) AS year,
        MONTH(order_date) AS month,
        ROUND(SUM(amount), 2) AS revenue
    FROM orders
    GROUP BY YEAR(order_date), MONTH(order_date)
)
SELECT 
    year,
    month,
    revenue,
    LAG(revenue) OVER (ORDER BY year, month) AS previous_month_revenue,
    ROUND(
        COALESCE(
            ((revenue - LAG(revenue) OVER (ORDER BY year, month)) / 
             NULLIF(LAG(revenue) OVER (ORDER BY year, month), 0)) * 100,
            0
        ), 2) AS growth_percentage
FROM monthly_sales
ORDER BY year, month;